set encoding=utf-8
scriptencoding utf-8

source $VIMRUNTIME/macros/matchit.vim

let b:match_ignorecase = 1

let g:python3_host_prog = expand($HOME) . '/.pyenv/shims/python3'

syntax enable

" Show bottom status
set laststatus=2

set backspace=indent,eol,start
set ambiwidth=double
set nowrap
set noswapfile
set nobackup

set hlsearch
set ignorecase
set smartcase " When a capital letter is included, not ignore the uppercase

set ruler
set number
set list " Show space char
set listchars=tab:>-,trail:.,nbsp:+
set scrolloff=5 " Margin scroll
set sidescroll=1
set sidescrolloff=15
set cursorline
set cursorcolumn

" Use tab completion
set wildmenu
set showcmd
set wildignore+=*.o,*.obj,*.out
set wildignore+=*.zip,*.tar.gz
set wildignore+=*/vendor/*,.git

" Use clipboard of system
set clipboard=unnamed

set autoindent

set mouse=c

" Do auto write when do make
set autowrite

" Do auto read when opened file is changed
set autoread


augroup auto_comment_off
  autocmd!
  autocmd BufEnter * setlocal formatoptions-=r
  autocmd BufEnter * setlocal formatoptions-=o
augroup END

set t_Co=256
set background=dark

" Indent type: c lang
" set cindent
"
" set shiftwidth=2
" set softtabstop=2
" set expandtab

""" Mappings
let g:mapleader = "\<Space>"
let g:maplocalleader = "\<Space>"

inoremap <C-j> <Esc>

" Emacs bind
inoremap <C-f> <Right>
inoremap <C-b> <Left>

nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

nnoremap <Leader>s <C-w>s
nnoremap <Leader>v <C-w>v
nnoremap <Leader>q <C-w>q
nnoremap <Leader>w <C-w>w
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

nmap <Space>] :vs<CR><C-]>

nnoremap <silent>[q :cprevious<CR>
nnoremap <silent>]q :cnext<CR>
nnoremap <silent>[Q :cfirst<CR>
nnoremap <silent>]Q :clast<CR>

nnoremap Y y$

nnoremap n nzz
nnoremap N Nzz

nnoremap <CR> :<C-u>call append(expand('.'), '')<Cr>j

nnoremap ; :
nnoremap : ;

nnoremap <silent><C-l> :NERDTreeTabsToggle<CR>

nnoremap <silent><Space> :GFiles<CR>

tnoremap <C-j> <C-\><C-n>
nnoremap <silent><Leader>t :sp<CR>:terminal<CR>
nnoremap <silent><Leader>vt :vs<CR>:terminal<CR>

""" ctags
nnoremap <C-]> g<C-]>

""" Plugins
if !filereadable(expand('~/.config/nvim/autoload/plug.vim'))
  execute '!curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')

Plug 'cocopon/iceberg.vim'
Plug 'junegunn/seoul256.vim'

Plug 'itchyny/lightline.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'vim-jp/vital.vim'

Plug 'jiangmiao/auto-pairs'
Plug 'tomtom/tcomment_vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-surround'
Plug 'szw/vim-tags'
Plug 'majutsushi/tagbar'

Plug 'tomlion/vim-solidity', { 'for': 'solidity' }

Plug 'editorconfig/editorconfig-vim'
" Plug 'lycoris0731/tweet.nvim', { 'do': ['make', 'UpdateRemotePlugins'] }

Plug 'othree/html5.vim',           { 'for': 'html' }
Plug 'mattn/emmet-vim',            { 'for': ['html', 'jsx', 'typescript', 'riot', 'ejs'] }
Plug 'mattn/jscomplete-vim',       { 'for': 'javascript' }
Plug 'hail2u/vim-css3-syntax',     { 'for': 'css' }
Plug 'elzr/vim-json',              { 'for': 'json' }
" Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'Quramy/tsuquyomi',           { 'for': 'typescript' }
Plug 'pangloss/vim-javascript',    { 'for': ['javascript', 'riot'] }
Plug 'ryym/vim-riot',              { 'for': 'riot' }
Plug 'nikvdp/ejs-syntax',          { 'for': 'ejs' }
Plug 'wavded/vim-stylus',          { 'for': 'stylus' }
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript', 'javascript.jsx'] }

Plug 'cespare/vim-toml', { 'for': ['toml', 'tml'] }

Plug 'benekastah/neomake'
augroup neomake
  autocmd!
  autocmd! BufWritePost * Neomake
augroup END
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'thinca/vim-quickrun'
Plug 'junegunn/vim-emoji'
Plug 'junegunn/limelight.vim'
Plug 'vim-jp/vimdoc-ja'
Plug 'lambdalisue/gina.vim'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'

Plug 'thinca/vim-splash'
let g:splash#path = $HOME . '/.vim/splash.txt' " All you need is Vim.

Plug 'fatih/vim-go',         { 'for': 'go' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'nsf/gocode',           { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }

Plug 'Shougo/deoplete.nvim',          { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-go',             { 'for': 'go' }
Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust' }
" Plug 'mhartington/nvim-typescript', { 'for': 'typescript' }
Plug 'Shougo/neco-syntax'
Plug 'ujihisa/neco-look'

Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }

call plug#end()

colorscheme seoul256

""" Plugin settings
"" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_list = 20 " Default: 100

"" Emmet
let g:user_emmet_leader_key='<c-e>'
let g:user_emmet_settings = {
  \   'variables': {
  \     'lang': 'ja'
  \   }
  \ }

"" Lightline
let g:lightline = {
  \   'colorscheme': 'solarized',
  \ }

let g:quickrun_config = {
  \   'javascript': {
  \     'command': 'node'
  \   }
  \ }

"" neomake
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:neomake_javascript_enabled_markers  = ['eslint']
let g:neomake_html_enabled_markers        = ['htmlhint']
let g:neomake_sh_enabled_markers          = ['shellcheck']
let g:neomake_python_enabled_markers      = ['pep8']
let g:neomake_vim_enabled_markers         = ['vint']
let g:neomake_typescript_tsc_markers      = { 'args': ['--experimentalDecorators'] }
augroup neomake
  au!
  au BufWritePost * Neomake
augroup END

"" neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" imap <expr><TAB>
"   \   pumvisible() ? <C-n> :
"   \   neosnippet#expandable_or_jumpable() ? <Plug>(neosnippet_expand_or_jump) : <TAB>
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? <Plug>(neosnippet_expand_or_jump)" : <TAB>

" My snippets
let g:neosnippet#snippets_directory='~/.vim/snippets'

"" NERDTree
" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
let g:NERDTreeShowHidden = 1

" vim-go
let g:go_fmt_command = 'goimports'
let g:go_list_type = 'quickfix'
au FileType go nmap <C-g>b <Plug>(go-build)
au FileType go nmap <C-g>t <Plug>(go-test)
au FileType go nmap <C-g>r <Plug>(go-run)

au FileType go nmap <C-g>ds <Plug>(go-def-split)
au FileType go nmap <C-g>dv <Plug>(go-def-vertical)
au FileType go nmap <C-g>dt <Plug>(go-def-tab)

au FileType go nmap <C-g>gd <Plug>(go-doc)
au FileType go nmap <C-g>gv <Plug>(go-doc-vertical)

au FileType go nmap <C-g>s <Plug>(go-implements)
au FileType go nmap <C-g>e <Plug>(go-rename)

" vim-tags
let g:vim_tags_auto_generate = 1

" rust.vim
let g:rustfmt_autosave = 1

""" development
if $DEV_VIM == 1
  exe 'set runtimepath^=' . getcwd()
  augroup dev_vim
    au!
    au BufWritePost *.vim source %
  augroup END
  vnoremap <Space><Space> :'<,'>CTree<CR>
endif
