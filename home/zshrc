#
# autoload
#
autoload -Uz colors
autoload -Uz compinit
autoload -Uz promptinit
autoload -Uz vcs_info
colors
compinit
promptinit
vcs_info

#
# completion
#
autoload -Uz compinit
compinit

#
# options
#
setopt share_history
setopt histignorealldups
setopt auto_cd
setopt prompt_subst
setopt rm_star_silent
setopt hist_ignore_space

#
# Functions
#

hascmd() {
  [[ -x $(which "$1") ]]
}

isdebian() {
  uname -v | grep Debian
}

chpwd() {
  ls -F
}

dic() {
  grep "$1" $HOME/utils/gene.txt -A 1 -wi --color
}

mkcd() {
  mkdir "$1"
  cd "$1"
}

fo() {
  p='.'
  if [ "$#" -eq 1 ]; then
    p=$1
  fi

  find "$p" | fzf | xargs -I @ open "@"
}

# Used by other shellscripts only
# gitcommit <commit msg>
gitcommit() {
  if [ "$#" -ne 1 ]; then
    return 1
  fi

  git add .
  git commit -m "$1"
  git push origin master
}

# dotc "commit message"
dotc() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: dotc commit_msg"
    return 1
  fi

  (cd "$HOME"/dotfiles && gitcommit "$1")
}

# gini [--gh repo_name]
# gini does initial commit after initialize current directory
gini() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: gini --gh repo_name"
    return 1
  fi

  mkdir "$(ghq root)/github.com/ktr0731/$2"
  cd "$(ghq root)/github.com/ktr0731/$2"

  touch README.md

  git init
  git add .
  git commit -m 'initial commit'

  if [ "$#" -ge 1 ]; then
    case "$1" in
      "--gh")
        REPO_NAME=${2:-$(basename $(pwd))}
        hub create -p "$REPO_NAME"
        ;;
      *)
        echo 'Usage: dotc commit_msg --gh repo_name'
        return
    esac
  fi
}

sshf() {
  host=$(cat ~/.ssh/config | grep 'Host ' | cut -d ' ' -f 2 | fzf)
  if [[ "$?" -eq 0 ]]; then
    ssh $host
  fi
}

gl() {
  dir=$(ghq list | fzf)
  if [[ -n "$dir" ]]; then
    cd "$(ghq root)/$dir"
  fi
}

# find by the value
agv() {
  ag -l "$@" | fzf | xargs nvim
}

# find by the fle name
agf() {
  ag -l -g "$@" | fzf | xargs nvim
}

mkgif() {
  if [[ "$#" -ne 2 ]]; then
    echo "usage: mkgif <in.mov> <out.gif>"
    return 1
  fi
  mkdir out || return 1
  ffmpeg -i "$1" -an -r 10 'out/%05d.png'
  mogrify -resize 720 out/*.png
  convert out/* "$2"
  rm -rf out
}


#
# environment variables
#
export ITUNES_CLI_FUZZY_TOOL='fzf'

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
if hascmd nvim; then
  export EDITOR=nvim
  export VISUAL=nvim
else
  export EDITOR=vim
  export VISUAL=nvim
fi
export PAGER='less'
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow'
export ITUNES_CLI_FUZZY_TOOL='fzf'
export LESS='-m -M -i -R'

#
# History
#

export HISTFILE=~/.zhistory
export HISTSIZE=10000
export SAVEHIST=50000

#
# Bindkey
#

bindkey -e
export WORDCHARS='*?_.[]~-=&;!#$%^(){}<>'

#
# Source
#

if hascmd aws; then
  source /usr/local/bin/aws_zsh_completer.sh
fi

if hascmd kubectl; then
  source <(kubectl completion zsh)
fi

if [ -f ~/.cred.zsh ]; then
  source ~/.cred.zsh
fi

#
# Aliases
#

# commons

alias -g A=' | ag'
alias -g F=' | fzf |'
alias -g G=' | grep'
alias -g H=' | head'
alias -g L=' | less'
alias -g T=' | tail'
alias -g W=' | wc'
alias -g J=' | jq "."'
alias -g JL=' | jq "." | less'
alias -g B='$(git symbolic-ref --short HEAD)'

if hascmd xsel; then
  alias pbcopy='xsel --clipboard --input'
fi

if hascmd pbcopy; then
  alias -g P=' | pbcopy'
fi

if hascmd nvim; then
  alias vim='nvim'
fi

if hascmd htop; then
  alias htop='htop -t'
fi

alias cdg='cd-gitroot'

alias g='git'

alias gc='gcloud'
alias k='kubectl'

alias d='docker'
alias dcom='docker-compose'

alias ls="ls -F"
alias la="ls -a"
alias ll="ls -l"
alias lla="ls -al"

alias l='less'

alias sha1='openssl sha1'

alias rm='trash -rf'
alias cp='cp -r'

alias strace='strace -fi'
alias ltrace='ltrace -fi'

alias tmpcd='tmp ls F cd'
alias tmprm='tmp ls F tmp rm'

alias it='itunes'

alias vimrc='vim ~/.config/nvim/init.vim'
alias zshrc='vim ~/.zshrc'

alias sed='gsed'

alias gip='curl inet-ip.info'

alias diff='colordiff -u'

alias cg='cargo'

alias grep='grep --color'

alias kf='ps | fzf -m | awk "{ print \$1 }" | xargs kill -9'
alias pf='ps | fzf | awk "{ print $1 }" | xargs peep; noti'

if hascmd mmake; then
  alias make='mmake'
fi

local BREW_PREFIX=$(brew --prefix)

if [ uname = 'Darwin' ]; then
  alias ctags="$BREW_PREFIX/bin/ctags"
fi

if hascmd src-hilite-lesspipe.sh; then
  cl() {
    echo $@
    "$BREW_PREFIX/bin/src-hilite-lesspipe.sh" $@ | less
  }
fi

# Debian
if isdebian; then
  alias apt='apt -y'
fi

gocov() {
  if [[ "$#" -ne 0 ]]; then
    go test -coverpkg ./... -covermode=atomic -coverprofile=coverage.txt $@
  else
    go test -coverpkg ./... -covermode=atomic -coverprofile=coverage.txt ./...
  fi
  go tool cover -html=coverage.txt
  rm coverage.txt
}

#
# fzf
#

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#
# ssh-agent
#

eval "$(ssh-agent)"
# ssh-add ~/.ssh/privkey/*

#
# zplug
#

if [ ! -e $HOME"/.zplug" ]; then
  curl -sL zplug.sh/installer | zsh
fi

source ~/.zplug/init.zsh

# Plugins
zplug "b4b4r07/enhancd", use:init.sh
export ENHANCD_DISABLE_HOME=0
export ENHANCD_DISABLE_DOT=1
export ENHANCD_DISABLE_HYPHEN=1
zplug "zsh-users/zsh-completions"
zplug "mollifier/cd-gitroot"
zplug "zsh-users/zsh-autosuggestions"
zplug "Tarrasch/zsh-bd"
zplug "hlissner/zsh-autopair", defer:3
zplug "felixr/docker-zsh-completion"

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

#
# direnv
#

eval "$(direnv hook zsh)"

source <(salias __init__)

# For profile performance
if hascmd zprof; then
  zprof | less
fi

#
# prompt
#
PROMPT='❯❯❯%(?.%F{green}.%F{red})❯%f '

zstyle ':vcs_info:*' formats '%F{yellow}%b%f'
zstyle ':vcs_info:*' actionformats '%F{yellow}%b%f(%F{red}%a%f)'
precmd() {
  vcs_info
}
RPROMPT='%F{grey}%~%f%f ${vcs_info_msg_0_}'

#
# fzf
#


#
# GAE
#

if [ -f '/Users/ktr/google-cloud-sdk/path.zsh.inc' ]; then
  source '/Users/ktr/google-cloud-sdk/path.zsh.inc'
fi

if [ -f '/Users/ktr/google-cloud-sdk/completion.zsh.inc' ]; then
  source '/Users/ktr/google-cloud-sdk/completion.zsh.inc'
fi

if [ -f ~/secret.zsh ]; then
  source ~/secret.zsh
fi
